{
  "contract_name": "mock-red-bank",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "coins"
    ],
    "properties": {
      "coins": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/CoinMarketInfo"
        }
      }
    },
    "definitions": {
      "CoinMarketInfo": {
        "type": "object",
        "required": [
          "denom",
          "liquidation_threshold",
          "max_ltv"
        ],
        "properties": {
          "denom": {
            "type": "string"
          },
          "liquidation_threshold": {
            "$ref": "#/definitions/Decimal"
          },
          "max_ltv": {
            "$ref": "#/definitions/Decimal"
          }
        }
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "borrow"
        ],
        "properties": {
          "borrow": {
            "type": "object",
            "required": [
              "coin"
            ],
            "properties": {
              "coin": {
                "$ref": "#/definitions/Coin"
              },
              "recipient": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "repay"
        ],
        "properties": {
          "repay": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "denom": {
                "type": "string"
              },
              "on_behalf_of": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "user_asset_debt"
        ],
        "properties": {
          "user_asset_debt": {
            "type": "object",
            "required": [
              "denom",
              "user_address"
            ],
            "properties": {
              "denom": {
                "type": "string"
              },
              "user_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "market"
        ],
        "properties": {
          "market": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "market": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Market",
      "type": "object",
      "required": [
        "borrow_enabled",
        "borrow_index",
        "borrow_rate",
        "collateral_total_scaled",
        "debt_total_scaled",
        "denom",
        "deposit_cap",
        "deposit_enabled",
        "indexes_last_updated",
        "interest_rate_model",
        "liquidation_bonus",
        "liquidation_threshold",
        "liquidity_index",
        "liquidity_rate",
        "max_loan_to_value",
        "reserve_factor"
      ],
      "properties": {
        "borrow_enabled": {
          "description": "If false cannot borrow",
          "type": "boolean"
        },
        "borrow_index": {
          "description": "Borrow index (Used to compute borrow interest)",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "borrow_rate": {
          "description": "Rate charged to borrowers",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "collateral_total_scaled": {
          "description": "Total collateral scaled for the market's currency",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "debt_total_scaled": {
          "description": "Total debt scaled for the market's currency",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "denom": {
          "description": "Denom of the asset",
          "type": "string"
        },
        "deposit_cap": {
          "description": "Deposit Cap (defined in terms of the asset)",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "deposit_enabled": {
          "description": "If false cannot deposit",
          "type": "boolean"
        },
        "indexes_last_updated": {
          "description": "Timestamp (seconds) where indexes and where last updated",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "interest_rate_model": {
          "description": "model (params + internal state) that defines how interest rate behaves",
          "allOf": [
            {
              "$ref": "#/definitions/InterestRateModel"
            }
          ]
        },
        "liquidation_bonus": {
          "description": "Bonus amount of collateral liquidator get when repaying user's debt (Will get collateral from user in an amount equal to debt repayed + bonus)",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "liquidation_threshold": {
          "description": "Base asset amount in debt position per \"base asset\" of asset collateral that if surpassed makes the user's position liquidatable.",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "liquidity_index": {
          "description": "Liquidity index (Used to compute deposit interest)",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "liquidity_rate": {
          "description": "Rate paid to depositors",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "max_loan_to_value": {
          "description": "Max base asset that can be borrowed per \"base asset\" collateral when using the asset as collateral",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "reserve_factor": {
          "description": "Portion of the borrow rate that is kept as protocol rewards",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      },
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "InterestRateModel": {
          "type": "object",
          "required": [
            "base",
            "optimal_utilization_rate",
            "slope_1",
            "slope_2"
          ],
          "properties": {
            "base": {
              "description": "Base rate",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "optimal_utilization_rate": {
              "description": "Optimal utilization rate",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "slope_1": {
              "description": "Slope parameter for interest rate model function when utilization_rate < optimal_utilization_rate",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "slope_2": {
              "description": "Slope parameter for interest rate model function when utilization_rate >= optimal_utilization_rate",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "user_asset_debt": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserAssetDebtResponse",
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      },
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
