{
  "contract_name": "mars-mock-credit-manager",
  "contract_version": "2.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
    "type": "object"
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "set_positions_response"
        ],
        "properties": {
          "set_positions_response": {
            "type": "object",
            "required": [
              "account_id",
              "positions"
            ],
            "properties": {
              "account_id": {
                "type": "string"
              },
              "positions": {
                "$ref": "#/definitions/Positions"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "set_account_kind_response"
        ],
        "properties": {
          "set_account_kind_response": {
            "type": "object",
            "required": [
              "account_id",
              "kind"
            ],
            "properties": {
              "account_id": {
                "type": "string"
              },
              "kind": {
                "$ref": "#/definitions/AccountKind"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AccountKind": {
        "type": "string",
        "enum": [
          "default",
          "high_levered_strategy"
        ]
      },
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "DebtAmount": {
        "type": "object",
        "required": [
          "amount",
          "denom",
          "shares"
        ],
        "properties": {
          "amount": {
            "description": "amount of coins",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "denom": {
            "type": "string"
          },
          "shares": {
            "description": "number of shares in debt pool",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "LockingVaultAmount": {
        "type": "object",
        "required": [
          "locked",
          "unlocking"
        ],
        "properties": {
          "locked": {
            "$ref": "#/definitions/VaultAmount"
          },
          "unlocking": {
            "$ref": "#/definitions/UnlockingPositions"
          }
        },
        "additionalProperties": false
      },
      "Positions": {
        "type": "object",
        "required": [
          "account_id",
          "debts",
          "deposits",
          "lends",
          "vaults"
        ],
        "properties": {
          "account_id": {
            "type": "string"
          },
          "debts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DebtAmount"
            }
          },
          "deposits": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          },
          "lends": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          },
          "vaults": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/VaultPosition"
            }
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "UnlockingPositions": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/VaultUnlockingPosition"
        }
      },
      "VaultAmount": {
        "$ref": "#/definitions/Uint128"
      },
      "VaultBase_for_Addr": {
        "type": "object",
        "required": [
          "address"
        ],
        "properties": {
          "address": {
            "$ref": "#/definitions/Addr"
          }
        },
        "additionalProperties": false
      },
      "VaultPosition": {
        "type": "object",
        "required": [
          "amount",
          "vault"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/VaultPositionAmount"
          },
          "vault": {
            "$ref": "#/definitions/VaultBase_for_Addr"
          }
        },
        "additionalProperties": false
      },
      "VaultPositionAmount": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "unlocked"
            ],
            "properties": {
              "unlocked": {
                "$ref": "#/definitions/VaultAmount"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "locking"
            ],
            "properties": {
              "locking": {
                "$ref": "#/definitions/LockingVaultAmount"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "VaultUnlockingPosition": {
        "type": "object",
        "required": [
          "coin",
          "id"
        ],
        "properties": {
          "coin": {
            "description": "Coins that are awaiting to be unlocked (underlying, not vault tokens)",
            "allOf": [
              {
                "$ref": "#/definitions/Coin"
              }
            ]
          },
          "id": {
            "description": "Unique identifier representing the unlocking position. Needed for `ExecuteMsg::WithdrawUnlocked {}` call.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "account_kind"
        ],
        "properties": {
          "account_kind": {
            "type": "object",
            "required": [
              "account_id"
            ],
            "properties": {
              "account_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "accounts"
        ],
        "properties": {
          "accounts": {
            "type": "object",
            "required": [
              "owner"
            ],
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "owner": {
                "type": "string"
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Rover contract-level config",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "The amount the vault has been utilized, denominated in the same denom set in the vault config's deposit cap",
        "type": "object",
        "required": [
          "vault_utilization"
        ],
        "properties": {
          "vault_utilization": {
            "type": "object",
            "required": [
              "vault"
            ],
            "properties": {
              "vault": {
                "$ref": "#/definitions/VaultBase_for_String"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "All positions represented by token with value",
        "type": "object",
        "required": [
          "positions"
        ],
        "properties": {
          "positions": {
            "type": "object",
            "required": [
              "account_id"
            ],
            "properties": {
              "account_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Enumerate coin balances for all token positions; start_after accepts (account_id, denom)",
        "type": "object",
        "required": [
          "all_coin_balances"
        ],
        "properties": {
          "all_coin_balances": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "array",
                  "null"
                ],
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Enumerate debt shares for all token positions; start_after accepts (account_id, denom)",
        "type": "object",
        "required": [
          "all_debt_shares"
        ],
        "properties": {
          "all_debt_shares": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "array",
                  "null"
                ],
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Total debt shares issued for Coin",
        "type": "object",
        "required": [
          "total_debt_shares"
        ],
        "properties": {
          "total_debt_shares": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Enumerate total debt shares for all supported coins; start_after accepts denom string",
        "type": "object",
        "required": [
          "all_total_debt_shares"
        ],
        "properties": {
          "all_total_debt_shares": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Enumerate all vault positions; start_after accepts (account_id, addr)",
        "type": "object",
        "required": [
          "all_vault_positions"
        ],
        "properties": {
          "all_vault_positions": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "array",
                  "null"
                ],
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Estimate how many LP tokens received in exchange for coins provided for liquidity",
        "type": "object",
        "required": [
          "estimate_provide_liquidity"
        ],
        "properties": {
          "estimate_provide_liquidity": {
            "type": "object",
            "required": [
              "coins_in",
              "lp_token_out"
            ],
            "properties": {
              "coins_in": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "lp_token_out": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Estimate coins withdrawn if exchanged for LP tokens",
        "type": "object",
        "required": [
          "estimate_withdraw_liquidity"
        ],
        "properties": {
          "estimate_withdraw_liquidity": {
            "type": "object",
            "required": [
              "lp_token"
            ],
            "properties": {
              "lp_token": {
                "$ref": "#/definitions/Coin"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the value of the a vault coin position. Given the extremely low price-per-coin and lack of precision, individual vault coins cannot be priced, hence you must send the whole amount you want priced.",
        "type": "object",
        "required": [
          "vault_position_value"
        ],
        "properties": {
          "vault_position_value": {
            "type": "object",
            "required": [
              "vault_position"
            ],
            "properties": {
              "vault_position": {
                "$ref": "#/definitions/VaultPosition"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "LockingVaultAmount": {
        "type": "object",
        "required": [
          "locked",
          "unlocking"
        ],
        "properties": {
          "locked": {
            "$ref": "#/definitions/VaultAmount"
          },
          "unlocking": {
            "$ref": "#/definitions/UnlockingPositions"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "UnlockingPositions": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/VaultUnlockingPosition"
        }
      },
      "VaultAmount": {
        "$ref": "#/definitions/Uint128"
      },
      "VaultBase_for_Addr": {
        "type": "object",
        "required": [
          "address"
        ],
        "properties": {
          "address": {
            "$ref": "#/definitions/Addr"
          }
        },
        "additionalProperties": false
      },
      "VaultBase_for_String": {
        "type": "object",
        "required": [
          "address"
        ],
        "properties": {
          "address": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "VaultPosition": {
        "type": "object",
        "required": [
          "amount",
          "vault"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/VaultPositionAmount"
          },
          "vault": {
            "$ref": "#/definitions/VaultBase_for_Addr"
          }
        },
        "additionalProperties": false
      },
      "VaultPositionAmount": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "unlocked"
            ],
            "properties": {
              "unlocked": {
                "$ref": "#/definitions/VaultAmount"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "locking"
            ],
            "properties": {
              "locking": {
                "$ref": "#/definitions/LockingVaultAmount"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "VaultUnlockingPosition": {
        "type": "object",
        "required": [
          "coin",
          "id"
        ],
        "properties": {
          "coin": {
            "description": "Coins that are awaiting to be unlocked (underlying, not vault tokens)",
            "allOf": [
              {
                "$ref": "#/definitions/Coin"
              }
            ]
          },
          "id": {
            "description": "Unique identifier representing the unlocking position. Needed for `ExecuteMsg::WithdrawUnlocked {}` call.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "account_kind": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AccountKind",
      "type": "string",
      "enum": [
        "default",
        "high_levered_strategy"
      ]
    },
    "accounts": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Account",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Account"
      },
      "definitions": {
        "Account": {
          "type": "object",
          "required": [
            "id",
            "kind"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "kind": {
              "$ref": "#/definitions/AccountKind"
            }
          },
          "additionalProperties": false
        },
        "AccountKind": {
          "type": "string",
          "enum": [
            "default",
            "high_levered_strategy"
          ]
        }
      }
    },
    "all_coin_balances": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_CoinBalanceResponseItem",
      "type": "array",
      "items": {
        "$ref": "#/definitions/CoinBalanceResponseItem"
      },
      "definitions": {
        "CoinBalanceResponseItem": {
          "type": "object",
          "required": [
            "account_id",
            "amount",
            "denom"
          ],
          "properties": {
            "account_id": {
              "type": "string"
            },
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "all_debt_shares": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_SharesResponseItem",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SharesResponseItem"
      },
      "definitions": {
        "SharesResponseItem": {
          "type": "object",
          "required": [
            "account_id",
            "denom",
            "shares"
          ],
          "properties": {
            "account_id": {
              "type": "string"
            },
            "denom": {
              "type": "string"
            },
            "shares": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "all_total_debt_shares": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_DebtShares",
      "type": "array",
      "items": {
        "$ref": "#/definitions/DebtShares"
      },
      "definitions": {
        "DebtShares": {
          "type": "object",
          "required": [
            "denom",
            "shares"
          ],
          "properties": {
            "denom": {
              "type": "string"
            },
            "shares": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "all_vault_positions": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_VaultPositionResponseItem",
      "type": "array",
      "items": {
        "$ref": "#/definitions/VaultPositionResponseItem"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "LockingVaultAmount": {
          "type": "object",
          "required": [
            "locked",
            "unlocking"
          ],
          "properties": {
            "locked": {
              "$ref": "#/definitions/VaultAmount"
            },
            "unlocking": {
              "$ref": "#/definitions/UnlockingPositions"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UnlockingPositions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VaultUnlockingPosition"
          }
        },
        "VaultAmount": {
          "$ref": "#/definitions/Uint128"
        },
        "VaultBase_for_Addr": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "VaultPosition": {
          "type": "object",
          "required": [
            "amount",
            "vault"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/VaultPositionAmount"
            },
            "vault": {
              "$ref": "#/definitions/VaultBase_for_Addr"
            }
          },
          "additionalProperties": false
        },
        "VaultPositionAmount": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "unlocked"
              ],
              "properties": {
                "unlocked": {
                  "$ref": "#/definitions/VaultAmount"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "locking"
              ],
              "properties": {
                "locking": {
                  "$ref": "#/definitions/LockingVaultAmount"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "VaultPositionResponseItem": {
          "type": "object",
          "required": [
            "account_id",
            "position"
          ],
          "properties": {
            "account_id": {
              "type": "string"
            },
            "position": {
              "$ref": "#/definitions/VaultPosition"
            }
          },
          "additionalProperties": false
        },
        "VaultUnlockingPosition": {
          "type": "object",
          "required": [
            "coin",
            "id"
          ],
          "properties": {
            "coin": {
              "description": "Coins that are awaiting to be unlocked (underlying, not vault tokens)",
              "allOf": [
                {
                  "$ref": "#/definitions/Coin"
                }
              ]
            },
            "id": {
              "description": "Unique identifier representing the unlocking position. Needed for `ExecuteMsg::WithdrawUnlocked {}` call.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "health_contract",
        "incentives",
        "max_slippage",
        "max_unlocking_positions",
        "oracle",
        "ownership",
        "params",
        "red_bank",
        "swapper",
        "zapper"
      ],
      "properties": {
        "account_nft": {
          "type": [
            "string",
            "null"
          ]
        },
        "health_contract": {
          "type": "string"
        },
        "incentives": {
          "type": "string"
        },
        "max_slippage": {
          "$ref": "#/definitions/Decimal"
        },
        "max_unlocking_positions": {
          "$ref": "#/definitions/Uint128"
        },
        "oracle": {
          "type": "string"
        },
        "ownership": {
          "$ref": "#/definitions/OwnerResponse"
        },
        "params": {
          "type": "string"
        },
        "red_bank": {
          "type": "string"
        },
        "rewards_collector": {
          "anyOf": [
            {
              "$ref": "#/definitions/RewardsCollector"
            },
            {
              "type": "null"
            }
          ]
        },
        "swapper": {
          "type": "string"
        },
        "zapper": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "OwnerResponse": {
          "description": "Returned from Owner.query()",
          "type": "object",
          "required": [
            "abolished",
            "initialized"
          ],
          "properties": {
            "abolished": {
              "type": "boolean"
            },
            "emergency_owner": {
              "type": [
                "string",
                "null"
              ]
            },
            "initialized": {
              "type": "boolean"
            },
            "owner": {
              "type": [
                "string",
                "null"
              ]
            },
            "proposed": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "RewardsCollector": {
          "type": "object",
          "required": [
            "account_id",
            "address"
          ],
          "properties": {
            "account_id": {
              "type": "string"
            },
            "address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "estimate_provide_liquidity": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "estimate_withdraw_liquidity": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Coin",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Coin"
      },
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "positions": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Positions",
      "type": "object",
      "required": [
        "account_id",
        "debts",
        "deposits",
        "lends",
        "vaults"
      ],
      "properties": {
        "account_id": {
          "type": "string"
        },
        "debts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DebtAmount"
          }
        },
        "deposits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "lends": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "vaults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VaultPosition"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "DebtAmount": {
          "type": "object",
          "required": [
            "amount",
            "denom",
            "shares"
          ],
          "properties": {
            "amount": {
              "description": "amount of coins",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "denom": {
              "type": "string"
            },
            "shares": {
              "description": "number of shares in debt pool",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "LockingVaultAmount": {
          "type": "object",
          "required": [
            "locked",
            "unlocking"
          ],
          "properties": {
            "locked": {
              "$ref": "#/definitions/VaultAmount"
            },
            "unlocking": {
              "$ref": "#/definitions/UnlockingPositions"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UnlockingPositions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VaultUnlockingPosition"
          }
        },
        "VaultAmount": {
          "$ref": "#/definitions/Uint128"
        },
        "VaultBase_for_Addr": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "VaultPosition": {
          "type": "object",
          "required": [
            "amount",
            "vault"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/VaultPositionAmount"
            },
            "vault": {
              "$ref": "#/definitions/VaultBase_for_Addr"
            }
          },
          "additionalProperties": false
        },
        "VaultPositionAmount": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "unlocked"
              ],
              "properties": {
                "unlocked": {
                  "$ref": "#/definitions/VaultAmount"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "locking"
              ],
              "properties": {
                "locking": {
                  "$ref": "#/definitions/LockingVaultAmount"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "VaultUnlockingPosition": {
          "type": "object",
          "required": [
            "coin",
            "id"
          ],
          "properties": {
            "coin": {
              "description": "Coins that are awaiting to be unlocked (underlying, not vault tokens)",
              "allOf": [
                {
                  "$ref": "#/definitions/Coin"
                }
              ]
            },
            "id": {
              "description": "Unique identifier representing the unlocking position. Needed for `ExecuteMsg::WithdrawUnlocked {}` call.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "total_debt_shares": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DebtShares",
      "type": "object",
      "required": [
        "denom",
        "shares"
      ],
      "properties": {
        "denom": {
          "type": "string"
        },
        "shares": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "vault_position_value": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VaultPositionValue",
      "type": "object",
      "required": [
        "base_coin",
        "vault_coin"
      ],
      "properties": {
        "base_coin": {
          "description": "value of all unlocking positions",
          "allOf": [
            {
              "$ref": "#/definitions/CoinValue"
            }
          ]
        },
        "vault_coin": {
          "description": "value of locked or unlocked",
          "allOf": [
            {
              "$ref": "#/definitions/CoinValue"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "CoinValue": {
          "type": "object",
          "required": [
            "amount",
            "denom",
            "value"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            },
            "value": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "vault_utilization": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VaultUtilizationResponse",
      "type": "object",
      "required": [
        "utilization",
        "vault"
      ],
      "properties": {
        "utilization": {
          "$ref": "#/definitions/Coin"
        },
        "vault": {
          "$ref": "#/definitions/VaultBase_for_String"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "VaultBase_for_String": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    }
  }
}
