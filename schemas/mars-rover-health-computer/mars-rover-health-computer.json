{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "HealthComputer",
  "description": "`HealthComputer` is a shared struct with the frontend that gets compiled to wasm. For this reason, it uses a dependency-injection-like pattern where all required data is needed up front.",
  "type": "object",
  "required": [
    "denoms_data",
    "positions",
    "vaults_data"
  ],
  "properties": {
    "denoms_data": {
      "$ref": "#/definitions/DenomsData"
    },
    "positions": {
      "$ref": "#/definitions/Positions"
    },
    "vaults_data": {
      "$ref": "#/definitions/VaultsData"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetParams": {
      "type": "object",
      "required": [
        "liquidation_bonus",
        "liquidation_threshold",
        "max_loan_to_value",
        "red_bank",
        "rover"
      ],
      "properties": {
        "liquidation_bonus": {
          "$ref": "#/definitions/Decimal"
        },
        "liquidation_threshold": {
          "$ref": "#/definitions/Decimal"
        },
        "max_loan_to_value": {
          "$ref": "#/definitions/Decimal"
        },
        "red_bank": {
          "$ref": "#/definitions/RedBankSettings"
        },
        "rover": {
          "$ref": "#/definitions/RoverSettings"
        }
      },
      "additionalProperties": false
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "CoinValue": {
      "type": "object",
      "required": [
        "amount",
        "denom",
        "value"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false
    },
    "DebtAmount": {
      "type": "object",
      "required": [
        "amount",
        "denom",
        "shares"
      ],
      "properties": {
        "amount": {
          "description": "amount of coins",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "denom": {
          "type": "string"
        },
        "shares": {
          "description": "number of shares in debt pool",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "DenomsData": {
      "type": "object",
      "required": [
        "params",
        "prices"
      ],
      "properties": {
        "params": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AssetParams"
          }
        },
        "prices": {
          "description": "Must include data from info.base token for the vaults",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Decimal"
          }
        }
      },
      "additionalProperties": false
    },
    "HighLeverageStrategyParams": {
      "type": "object",
      "required": [
        "liquidation_threshold",
        "max_loan_to_value"
      ],
      "properties": {
        "liquidation_threshold": {
          "$ref": "#/definitions/Decimal"
        },
        "max_loan_to_value": {
          "$ref": "#/definitions/Decimal"
        }
      },
      "additionalProperties": false
    },
    "LentAmount": {
      "type": "object",
      "required": [
        "amount",
        "denom",
        "shares"
      ],
      "properties": {
        "amount": {
          "description": "amount of coins",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "denom": {
          "type": "string"
        },
        "shares": {
          "description": "number of shares in lent pool",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "LockingVaultAmount": {
      "type": "object",
      "required": [
        "locked",
        "unlocking"
      ],
      "properties": {
        "locked": {
          "$ref": "#/definitions/VaultAmount"
        },
        "unlocking": {
          "$ref": "#/definitions/UnlockingPositions"
        }
      },
      "additionalProperties": false
    },
    "Positions": {
      "type": "object",
      "required": [
        "account_id",
        "debts",
        "deposits",
        "lends",
        "vaults"
      ],
      "properties": {
        "account_id": {
          "type": "string"
        },
        "debts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DebtAmount"
          }
        },
        "deposits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "lends": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LentAmount"
          }
        },
        "vaults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VaultPosition"
          }
        }
      },
      "additionalProperties": false
    },
    "RedBankSettings": {
      "type": "object",
      "required": [
        "borrow_enabled",
        "deposit_cap",
        "deposit_enabled"
      ],
      "properties": {
        "borrow_enabled": {
          "type": "boolean"
        },
        "deposit_cap": {
          "$ref": "#/definitions/Uint128"
        },
        "deposit_enabled": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "RoverSettings": {
      "type": "object",
      "required": [
        "hls",
        "whitelisted"
      ],
      "properties": {
        "hls": {
          "$ref": "#/definitions/HighLeverageStrategyParams"
        },
        "whitelisted": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "UnlockingPositions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/VaultUnlockingPosition"
      }
    },
    "VaultAmount": {
      "$ref": "#/definitions/Uint128"
    },
    "VaultBase_for_Addr": {
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Addr"
        }
      },
      "additionalProperties": false
    },
    "VaultConfig": {
      "type": "object",
      "required": [
        "deposit_cap",
        "liquidation_threshold",
        "max_loan_to_value",
        "whitelisted"
      ],
      "properties": {
        "deposit_cap": {
          "$ref": "#/definitions/Coin"
        },
        "liquidation_threshold": {
          "$ref": "#/definitions/Decimal"
        },
        "max_loan_to_value": {
          "$ref": "#/definitions/Decimal"
        },
        "whitelisted": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "VaultPosition": {
      "type": "object",
      "required": [
        "amount",
        "vault"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/VaultPositionAmount"
        },
        "vault": {
          "$ref": "#/definitions/VaultBase_for_Addr"
        }
      },
      "additionalProperties": false
    },
    "VaultPositionAmount": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "unlocked"
          ],
          "properties": {
            "unlocked": {
              "$ref": "#/definitions/VaultAmount"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "locking"
          ],
          "properties": {
            "locking": {
              "$ref": "#/definitions/LockingVaultAmount"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "VaultPositionValue": {
      "type": "object",
      "required": [
        "base_coin",
        "vault_coin"
      ],
      "properties": {
        "base_coin": {
          "description": "value of all unlocking positions",
          "allOf": [
            {
              "$ref": "#/definitions/CoinValue"
            }
          ]
        },
        "vault_coin": {
          "description": "value of locked or unlocked",
          "allOf": [
            {
              "$ref": "#/definitions/CoinValue"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "VaultUnlockingPosition": {
      "type": "object",
      "required": [
        "coin",
        "id"
      ],
      "properties": {
        "coin": {
          "description": "Coins that are awaiting to be unlocked (underlying, not vault tokens)",
          "allOf": [
            {
              "$ref": "#/definitions/Coin"
            }
          ]
        },
        "id": {
          "description": "Unique identifier representing the unlocking position. Needed for `ExecuteMsg::WithdrawUnlocked {}` call.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "VaultsData": {
      "type": "object",
      "required": [
        "vault_configs",
        "vault_values"
      ],
      "properties": {
        "vault_configs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/VaultConfig"
          }
        },
        "vault_values": {
          "description": "explain this, unlocked or locked value given the pricing method of vaults, cannot use individual coins",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/VaultPositionValue"
          }
        }
      },
      "additionalProperties": false
    }
  }
}