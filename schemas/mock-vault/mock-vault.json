{
  "contract_name": "mock-vault",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "asset_denoms",
      "lp_token_denom",
      "oracle"
    ],
    "properties": {
      "asset_denoms": {
        "description": "Denoms for assets in vault",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "lockup": {
        "description": "Time in seconds for unlock period",
        "type": [
          "integer",
          "null"
        ],
        "format": "uint64",
        "minimum": 0.0
      },
      "lp_token_denom": {
        "description": "Denom for vault LP share token",
        "type": "string"
      },
      "oracle": {
        "$ref": "#/definitions/OracleBase_for_String"
      }
    },
    "definitions": {
      "OracleBase_for_String": {
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "Partial compatibility with EIP-4626",
    "oneOf": [
      {
        "description": "Enters list of `Vec<Coin>` into a vault strategy in exchange for vault tokens.",
        "type": "object",
        "required": [
          "deposit"
        ],
        "properties": {
          "deposit": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraw underlying coins in vault by exchanging vault `Coin`",
        "type": "object",
        "required": [
          "withdraw"
        ],
        "properties": {
          "withdraw": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "A privileged action only to be used by Rover. Same as `Withdraw` except it bypasses any lockup period restrictions on the vault. Used only in the case position is unhealthy and requires immediate liquidation.",
        "type": "object",
        "required": [
          "force_withdraw"
        ],
        "properties": {
          "force_withdraw": {
            "type": "object"
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Vault requirements, lockup, & vault token denom",
        "type": "object",
        "required": [
          "info"
        ],
        "properties": {
          "info": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "All the coins that would be redeemed for in exchange for vault coins. Used by Rover to calculate vault position values.",
        "type": "object",
        "required": [
          "preview_redeem"
        ],
        "properties": {
          "preview_redeem": {
            "type": "object",
            "required": [
              "shares"
            ],
            "properties": {
              "shares": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VaultInfo",
      "type": "object",
      "required": [
        "coins",
        "token_denom"
      ],
      "properties": {
        "coins": {
          "description": "Coins required to enter vault. Amount will be proportional to the share of which it should occupy in the group (e.g. { denom: osmo, amount: 1 }, { denom: atom, amount: 1 } indicate a 50-50 split)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "lockup": {
          "description": "Time in seconds for unlock period",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "token_denom": {
          "description": "Denom of vault token",
          "type": "string"
        }
      },
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "preview_redeem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Coin",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Coin"
      },
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
