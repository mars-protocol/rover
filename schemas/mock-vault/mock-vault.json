{
  "contract_name": "mock-vault",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "oracle",
      "req_denom",
      "vault_token_denom"
    ],
    "properties": {
      "lockup": {
        "description": "Duration of unlock period",
        "anyOf": [
          {
            "$ref": "#/definitions/Duration"
          },
          {
            "type": "null"
          }
        ]
      },
      "oracle": {
        "$ref": "#/definitions/OracleBase_for_String"
      },
      "req_denom": {
        "description": "Denom required for entry. Also denom received on withdraw.",
        "type": "string"
      },
      "vault_token_denom": {
        "description": "Denom for vault token",
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Duration": {
        "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "height"
            ],
            "properties": {
              "height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Time in seconds",
            "type": "object",
            "required": [
              "time"
            ],
            "properties": {
              "time": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "OracleBase_for_String": {
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Called to deposit into the vault. Native assets are passed in the funds parameter.",
        "type": "object",
        "required": [
          "deposit"
        ],
        "properties": {
          "deposit": {
            "type": "object",
            "properties": {
              "recipient": {
                "description": "The optional recipient of the vault token. If not set, the caller address will be used instead.",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Called to redeem vault tokens and receive assets back from the vault. The native vault token must be passed in the funds parameter, unless the lockup extension is called, in which case the vault token has already been passed to ExecuteMsg::Unlock.",
        "type": "object",
        "required": [
          "redeem"
        ],
        "properties": {
          "redeem": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "description": "The amount of vault tokens sent to the contract. In the case that the vault token is a Cosmos native denom, we of course have this information in the info.funds, but if the vault implements the Cw4626 API, then we need this argument. We figured it's better to have one API for both types of vaults, so we require this argument.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ]
              },
              "recipient": {
                "description": "An optional field containing which address should receive the withdrawn underlying assets. If not set, the caller address will be used instead.",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Support for custom extensions",
        "type": "object",
        "required": [
          "vault_extension"
        ],
        "properties": {
          "vault_extension": {
            "$ref": "#/definitions/ExtensionExecuteMsg"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "ExtensionExecuteMsg": {
        "description": "Contains ExecuteMsgs of all enabled extensions. To enable extensions defined outside of this create, you can define your own `ExtensionExecuteMsg` type in your contract crate and pass it in as the generic parameter to ExecuteMsg",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "lockup"
            ],
            "properties": {
              "lockup": {
                "$ref": "#/definitions/LockupExecuteMsg"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "LockupExecuteMsg": {
        "oneOf": [
          {
            "description": "Unlock is called to initiate unlocking a locked position held by the vault. The caller must pass the native vault tokens in the funds field. Emits an event with type `UNLOCK_EVENT_TYPE` with an attribute with key `UNLOCKING_POSITION_ATTR_KEY` containing an u64 lockup_id. Also encodes the u64 lockup ID as binary and returns it in the Response's data field, so that it can be read by SubMsg replies.\n\nLike Redeem, this takes an amount so that the same API can be used for CW4626 and native tokens.",
            "type": "object",
            "required": [
              "unlock"
            ],
            "properties": {
              "unlock": {
                "type": "object",
                "required": [
                  "amount"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Withdraw an unlocking position that has finished unlocking.",
            "type": "object",
            "required": [
              "withdraw_unlocked"
            ],
            "properties": {
              "withdraw_unlocked": {
                "type": "object",
                "required": [
                  "lockup_id"
                ],
                "properties": {
                  "lockup_id": {
                    "description": "The ID of the expired lockup to withdraw from. If None is passed, the vault will attempt to withdraw all expired lockup positions. Note that this can fail if there are too many lockup positions and the `max_contract_gas` limit is hit.",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "recipient": {
                    "description": "An optional field containing which address should receive the withdrawn underlying assets. If not set, the caller address will be used instead.",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Can be called by whitelisted addresses to bypass the lockup and immediately return the underlying assets. Used in the event of liquidation. The caller must pass the native vault tokens in the funds field.",
            "type": "object",
            "required": [
              "force_withdraw"
            ],
            "properties": {
              "force_withdraw": {
                "type": "object",
                "required": [
                  "amount"
                ],
                "properties": {
                  "amount": {
                    "description": "The amount of vault tokens to force unlock.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Uint128"
                      }
                    ]
                  },
                  "recipient": {
                    "description": "The address which should receive the withdrawn assets. If not set, the caller address will be used instead.",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Force withdraw from a position that is already unlocking (Unlock has already been called).",
            "type": "object",
            "required": [
              "force_withdraw_unlocking"
            ],
            "properties": {
              "force_withdraw_unlocking": {
                "type": "object",
                "required": [
                  "lockup_id"
                ],
                "properties": {
                  "amount": {
                    "description": "Optional amounts of each underlying asset to be force withdrawn. If None is passed, the entire position will be force withdrawn. Vaults MAY require the ratio of assets to be the same as the ratio in the `deposit_assets` field returned by the `VaultInfo` query.",
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Uint128"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "lockup_id": {
                    "description": "The ID of the unlocking position from which to force withdraw",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "recipient": {
                    "description": "The address which should receive the withdrawn assets. If not set, the assets will be sent to the caller.",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Returns `VaultStandardInfo` with information on the version of the vault standard used as well as any enabled extensions.",
        "type": "object",
        "required": [
          "vault_standard_info"
        ],
        "properties": {
          "vault_standard_info": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns `VaultInfo` representing vault requirements, lockup, & vault token denom.",
        "type": "object",
        "required": [
          "info"
        ],
        "properties": {
          "info": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns `Uint128` amount of vault tokens that will be returned for the passed in assets.\n\nAllows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions.\n\nMUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called in the same transaction.\n\nMUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the deposit would be accepted, regardless if the user has enough tokens approved, etc.\n\nMUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.",
        "type": "object",
        "required": [
          "preview_deposit"
        ],
        "properties": {
          "preview_deposit": {
            "type": "object",
            "required": [
              "coins"
            ],
            "properties": {
              "coins": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Coin"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns `AssetsResponse` representing all the assets that would be redeemed in exchange for vault tokens. Used by Rover to calculate vault position values.",
        "type": "object",
        "required": [
          "preview_redeem"
        ],
        "properties": {
          "preview_redeem": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns `Option<AssetsResponse>` maximum amount of assets that can be deposited into the Vault for the `recipient`, through a call to Deposit.\n\nMUST return the maximum amount of assets deposit would allow to be deposited for `recipient` and not cause a revert, which MUST NOT be higher than the actual maximum that would be accepted (it should underestimate if necessary). This assumes that the user has infinite assets, i.e. MUST NOT rely on the asset balances of `recipient`.\n\nMUST factor in both global and user-specific limits, like if deposits are entirely disabled (even temporarily) it MUST return 0.",
        "type": "object",
        "required": [
          "max_deposit"
        ],
        "properties": {
          "max_deposit": {
            "type": "object",
            "required": [
              "recipient"
            ],
            "properties": {
              "recipient": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns `Option<Uint128>` maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a call to Withdraw\n\nTODO: Keep this? Could potentially be combined with MaxWithdraw to return a MaxWithdrawResponse type that includes both max assets that can be withdrawn as well as max vault shares that can be withdrawn in exchange for assets.",
        "type": "object",
        "required": [
          "max_redeem"
        ],
        "properties": {
          "max_redeem": {
            "type": "object",
            "required": [
              "owner"
            ],
            "properties": {
              "owner": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns `AssetsResponse` assets managed by vault. Useful for display purposes, and does not have to confer the exact amount of underlying assets.",
        "type": "object",
        "required": [
          "total_assets"
        ],
        "properties": {
          "total_assets": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns `Uint128` total amount of vault tokens in circulation.",
        "type": "object",
        "required": [
          "total_vault_token_supply"
        ],
        "properties": {
          "total_vault_token_supply": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "The amount of shares that the vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met.\n\nUseful for display purposes and does not have to confer the exact amount of shares returned by the vault if the passed in assets were deposited. This calculation may not reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from.",
        "type": "object",
        "required": [
          "convert_to_shares"
        ],
        "properties": {
          "convert_to_shares": {
            "type": "object",
            "required": [
              "coins"
            ],
            "properties": {
              "coins": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Coin"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns `AssetsResponse` assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met.\n\nUseful for display purposes and does not have to confer the exact amount of assets returned by the vault if the passed in shares were withdrawn. This calculation may not reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from.",
        "type": "object",
        "required": [
          "convert_to_assets"
        ],
        "properties": {
          "convert_to_assets": {
            "type": "object",
            "required": [
              "shares"
            ],
            "properties": {
              "shares": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "TODO: How to handle return derive? We must supply a type here, but we don't know it.",
        "type": "object",
        "required": [
          "vault_extension"
        ],
        "properties": {
          "vault_extension": {
            "$ref": "#/definitions/ExtensionQueryMsg"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "ExtensionQueryMsg": {
        "description": "Contains QueryMsgs of all enabled extensions. To enable extensions defined outside of this create, you can define your own `ExtensionQueryMsg` type in your contract crate and pass it in as the generic parameter to QueryMsg",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "lockup"
            ],
            "properties": {
              "lockup": {
                "$ref": "#/definitions/LockupQueryMsg"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "LockupQueryMsg": {
        "oneOf": [
          {
            "description": "Returns a `Vec<Lockup>` containing all the currently unclaimed lockup positions for the `owner`.",
            "type": "object",
            "required": [
              "lockups"
            ],
            "properties": {
              "lockups": {
                "type": "object",
                "required": [
                  "owner"
                ],
                "properties": {
                  "limit": {
                    "description": "Max amount of results to return",
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "owner": {
                    "description": "The address of the owner of the lockup",
                    "type": "string"
                  },
                  "start_after": {
                    "description": "Return results only after this lockup_id",
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Returns `Lockup` info about a specific lockup, by owner and ID.",
            "type": "object",
            "required": [
              "lockup"
            ],
            "properties": {
              "lockup": {
                "type": "object",
                "required": [
                  "lockup_id"
                ],
                "properties": {
                  "lockup_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Returns `cw_utils::Duration` duration of the lockup.",
            "type": "object",
            "required": [
              "lockup_duration"
            ],
            "properties": {
              "lockup_duration": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "convert_to_assets": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AssetsResponse",
      "type": "object",
      "required": [
        "coin"
      ],
      "properties": {
        "coin": {
          "$ref": "#/definitions/Coin"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "convert_to_shares": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VaultInfo",
      "description": "Returned by QueryMsg::Info and contains information about this vault",
      "type": "object",
      "required": [
        "req_denom",
        "vault_token_denom"
      ],
      "properties": {
        "req_denom": {
          "type": "string"
        },
        "vault_token_denom": {
          "description": "Denom of vault token",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "max_deposit": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_AssetsResponse",
      "anyOf": [
        {
          "$ref": "#/definitions/AssetsResponse"
        },
        {
          "type": "null"
        }
      ],
      "definitions": {
        "AssetsResponse": {
          "type": "object",
          "required": [
            "coin"
          ],
          "properties": {
            "coin": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "max_redeem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_Uint128",
      "anyOf": [
        {
          "$ref": "#/definitions/Uint128"
        },
        {
          "type": "null"
        }
      ],
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "preview_deposit": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "preview_redeem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AssetsResponse",
      "type": "object",
      "required": [
        "coin"
      ],
      "properties": {
        "coin": {
          "$ref": "#/definitions/Coin"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "total_assets": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AssetsResponse",
      "type": "object",
      "required": [
        "coin"
      ],
      "properties": {
        "coin": {
          "$ref": "#/definitions/Coin"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "total_vault_token_supply": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "vault_extension": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Empty",
      "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
      "type": "object"
    },
    "vault_standard_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VaultStandardInfo",
      "description": "Struct returned from QueryMsg::VaultStandardInfo with information about the used version of the vault standard and any extensions used.\n\nThis struct should be stored as an Item under the `vault_standard_info` key, so that other contracts can do a RawQuery and read it directly from storage instead of needing to do a costly SmartQuery.",
      "type": "object",
      "required": [
        "extensions",
        "version"
      ],
      "properties": {
        "extensions": {
          "description": "A list of vault standard extensions used by the vault. E.g. [\"cw20\", \"lockup\", \"keeper\"]",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "description": "The version of the vault standard used. A number, e.g. 1, 2, etc.",
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    }
  }
}
