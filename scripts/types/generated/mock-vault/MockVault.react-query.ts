// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.20.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee, Coin } from '@cosmjs/amino'
import {
  Duration,
  OracleBaseForString,
  InstantiateMsg,
  ExecuteMsg,
  Uint128,
  ExtensionExecuteMsg,
  LockupExecuteMsg,
  ForceUnlockExecuteMsg,
  QueryMsg,
  ExtensionQueryMsg,
  LockupQueryMsg,
  VaultInfo,
  Empty,
  VaultStandardInfo,
} from './MockVault.types'
import { MockVaultQueryClient, MockVaultClient } from './MockVault.client'
export const mockVaultQueryKeys = {
  contract: [
    {
      contract: 'mockVault',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...mockVaultQueryKeys.contract[0], address: contractAddress }] as const,
  vaultStandardInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...mockVaultQueryKeys.address(contractAddress)[0], method: 'vault_standard_info', args },
    ] as const,
  info: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...mockVaultQueryKeys.address(contractAddress)[0], method: 'info', args }] as const,
  previewDeposit: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...mockVaultQueryKeys.address(contractAddress)[0], method: 'preview_deposit', args },
    ] as const,
  previewRedeem: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...mockVaultQueryKeys.address(contractAddress)[0], method: 'preview_redeem', args },
    ] as const,
  totalAssets: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...mockVaultQueryKeys.address(contractAddress)[0], method: 'total_assets', args }] as const,
  totalVaultTokenSupply: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...mockVaultQueryKeys.address(contractAddress)[0],
        method: 'total_vault_token_supply',
        args,
      },
    ] as const,
  convertToShares: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...mockVaultQueryKeys.address(contractAddress)[0], method: 'convert_to_shares', args },
    ] as const,
  convertToAssets: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...mockVaultQueryKeys.address(contractAddress)[0], method: 'convert_to_assets', args },
    ] as const,
  vaultExtension: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...mockVaultQueryKeys.address(contractAddress)[0], method: 'vault_extension', args },
    ] as const,
}
export interface MockVaultReactQuery<TResponse, TData = TResponse> {
  client: MockVaultQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface MockVaultVaultExtensionQuery<TData> extends MockVaultReactQuery<Empty, TData> {}
export function useMockVaultVaultExtensionQuery<TData = Empty>({
  client,
  options,
}: MockVaultVaultExtensionQuery<TData>) {
  return useQuery<Empty, Error, TData>(
    mockVaultQueryKeys.vaultExtension(client?.contractAddress),
    () => (client ? client.vaultExtension() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockVaultConvertToAssetsQuery<TData> extends MockVaultReactQuery<Uint128, TData> {
  args: {
    amount: Uint128
  }
}
export function useMockVaultConvertToAssetsQuery<TData = Uint128>({
  client,
  args,
  options,
}: MockVaultConvertToAssetsQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    mockVaultQueryKeys.convertToAssets(client?.contractAddress, args),
    () =>
      client
        ? client.convertToAssets({
            amount: args.amount,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockVaultConvertToSharesQuery<TData> extends MockVaultReactQuery<Uint128, TData> {
  args: {
    amount: Uint128
  }
}
export function useMockVaultConvertToSharesQuery<TData = Uint128>({
  client,
  args,
  options,
}: MockVaultConvertToSharesQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    mockVaultQueryKeys.convertToShares(client?.contractAddress, args),
    () =>
      client
        ? client.convertToShares({
            amount: args.amount,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockVaultTotalVaultTokenSupplyQuery<TData>
  extends MockVaultReactQuery<Uint128, TData> {}
export function useMockVaultTotalVaultTokenSupplyQuery<TData = Uint128>({
  client,
  options,
}: MockVaultTotalVaultTokenSupplyQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    mockVaultQueryKeys.totalVaultTokenSupply(client?.contractAddress),
    () => (client ? client.totalVaultTokenSupply() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockVaultTotalAssetsQuery<TData> extends MockVaultReactQuery<Uint128, TData> {}
export function useMockVaultTotalAssetsQuery<TData = Uint128>({
  client,
  options,
}: MockVaultTotalAssetsQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    mockVaultQueryKeys.totalAssets(client?.contractAddress),
    () => (client ? client.totalAssets() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockVaultPreviewRedeemQuery<TData> extends MockVaultReactQuery<Uint128, TData> {
  args: {
    amount: Uint128
  }
}
export function useMockVaultPreviewRedeemQuery<TData = Uint128>({
  client,
  args,
  options,
}: MockVaultPreviewRedeemQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    mockVaultQueryKeys.previewRedeem(client?.contractAddress, args),
    () =>
      client
        ? client.previewRedeem({
            amount: args.amount,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockVaultPreviewDepositQuery<TData> extends MockVaultReactQuery<Uint128, TData> {
  args: {
    amount: Uint128
  }
}
export function useMockVaultPreviewDepositQuery<TData = Uint128>({
  client,
  args,
  options,
}: MockVaultPreviewDepositQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    mockVaultQueryKeys.previewDeposit(client?.contractAddress, args),
    () =>
      client
        ? client.previewDeposit({
            amount: args.amount,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockVaultInfoQuery<TData> extends MockVaultReactQuery<VaultInfo, TData> {}
export function useMockVaultInfoQuery<TData = VaultInfo>({
  client,
  options,
}: MockVaultInfoQuery<TData>) {
  return useQuery<VaultInfo, Error, TData>(
    mockVaultQueryKeys.info(client?.contractAddress),
    () => (client ? client.info() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockVaultVaultStandardInfoQuery<TData>
  extends MockVaultReactQuery<VaultStandardInfo, TData> {}
export function useMockVaultVaultStandardInfoQuery<TData = VaultStandardInfo>({
  client,
  options,
}: MockVaultVaultStandardInfoQuery<TData>) {
  return useQuery<VaultStandardInfo, Error, TData>(
    mockVaultQueryKeys.vaultStandardInfo(client?.contractAddress),
    () => (client ? client.vaultStandardInfo() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockVaultVaultExtensionMutation {
  client: MockVaultClient
  msg: ExtensionExecuteMsg
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMockVaultVaultExtensionMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MockVaultVaultExtensionMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MockVaultVaultExtensionMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.vaultExtension(msg, fee, memo, funds),
    options,
  )
}
export interface MockVaultRedeemMutation {
  client: MockVaultClient
  msg: {
    amount: Uint128
    recipient?: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMockVaultRedeemMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, MockVaultRedeemMutation>, 'mutationFn'>,
) {
  return useMutation<ExecuteResult, Error, MockVaultRedeemMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.redeem(msg, fee, memo, funds),
    options,
  )
}
export interface MockVaultDepositMutation {
  client: MockVaultClient
  msg: {
    amount: Uint128
    recipient?: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMockVaultDepositMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, MockVaultDepositMutation>, 'mutationFn'>,
) {
  return useMutation<ExecuteResult, Error, MockVaultDepositMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.deposit(msg, fee, memo, funds),
    options,
  )
}
