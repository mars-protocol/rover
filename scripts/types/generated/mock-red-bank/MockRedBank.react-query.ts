// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.20.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee, Coin } from '@cosmjs/amino'
import {
  Decimal,
  InstantiateMsg,
  CoinMarketInfo,
  ExecuteMsg,
  Uint128,
  CreateOrUpdateConfig,
  InitOrUpdateAssetParams,
  InterestRateModel,
  QueryMsg,
  ConfigForString,
  Market,
  ArrayOfMarket,
  UncollateralizedLoanLimitResponse,
  ArrayOfUncollateralizedLoanLimitResponse,
  UserCollateralResponse,
  ArrayOfUserCollateralResponse,
  UserDebtResponse,
  ArrayOfUserDebtResponse,
  UserHealthStatus,
  UserPositionResponse,
} from './MockRedBank.types'
import { MockRedBankQueryClient, MockRedBankClient } from './MockRedBank.client'
export const mockRedBankQueryKeys = {
  contract: [
    {
      contract: 'mockRedBank',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...mockRedBankQueryKeys.contract[0], address: contractAddress }] as const,
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...mockRedBankQueryKeys.address(contractAddress)[0], method: 'config', args }] as const,
  market: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...mockRedBankQueryKeys.address(contractAddress)[0], method: 'market', args }] as const,
  markets: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...mockRedBankQueryKeys.address(contractAddress)[0], method: 'markets', args }] as const,
  uncollateralizedLoanLimit: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...mockRedBankQueryKeys.address(contractAddress)[0],
        method: 'uncollateralized_loan_limit',
        args,
      },
    ] as const,
  uncollateralizedLoanLimits: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...mockRedBankQueryKeys.address(contractAddress)[0],
        method: 'uncollateralized_loan_limits',
        args,
      },
    ] as const,
  userDebt: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...mockRedBankQueryKeys.address(contractAddress)[0], method: 'user_debt', args }] as const,
  userDebts: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...mockRedBankQueryKeys.address(contractAddress)[0], method: 'user_debts', args }] as const,
  userCollateral: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...mockRedBankQueryKeys.address(contractAddress)[0], method: 'user_collateral', args },
    ] as const,
  userCollaterals: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...mockRedBankQueryKeys.address(contractAddress)[0], method: 'user_collaterals', args },
    ] as const,
  userPosition: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...mockRedBankQueryKeys.address(contractAddress)[0], method: 'user_position', args },
    ] as const,
  scaledLiquidityAmount: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...mockRedBankQueryKeys.address(contractAddress)[0],
        method: 'scaled_liquidity_amount',
        args,
      },
    ] as const,
  scaledDebtAmount: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...mockRedBankQueryKeys.address(contractAddress)[0], method: 'scaled_debt_amount', args },
    ] as const,
  underlyingLiquidityAmount: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...mockRedBankQueryKeys.address(contractAddress)[0],
        method: 'underlying_liquidity_amount',
        args,
      },
    ] as const,
  underlyingDebtAmount: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...mockRedBankQueryKeys.address(contractAddress)[0],
        method: 'underlying_debt_amount',
        args,
      },
    ] as const,
}
export interface MockRedBankReactQuery<TResponse, TData = TResponse> {
  client: MockRedBankQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface MockRedBankUnderlyingDebtAmountQuery<TData>
  extends MockRedBankReactQuery<Uint128, TData> {
  args: {
    amountScaled: Uint128
    denom: string
  }
}
export function useMockRedBankUnderlyingDebtAmountQuery<TData = Uint128>({
  client,
  args,
  options,
}: MockRedBankUnderlyingDebtAmountQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    mockRedBankQueryKeys.underlyingDebtAmount(client?.contractAddress, args),
    () =>
      client
        ? client.underlyingDebtAmount({
            amountScaled: args.amountScaled,
            denom: args.denom,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockRedBankUnderlyingLiquidityAmountQuery<TData>
  extends MockRedBankReactQuery<Uint128, TData> {
  args: {
    amountScaled: Uint128
    denom: string
  }
}
export function useMockRedBankUnderlyingLiquidityAmountQuery<TData = Uint128>({
  client,
  args,
  options,
}: MockRedBankUnderlyingLiquidityAmountQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    mockRedBankQueryKeys.underlyingLiquidityAmount(client?.contractAddress, args),
    () =>
      client
        ? client.underlyingLiquidityAmount({
            amountScaled: args.amountScaled,
            denom: args.denom,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockRedBankScaledDebtAmountQuery<TData>
  extends MockRedBankReactQuery<Uint128, TData> {
  args: {
    amount: Uint128
    denom: string
  }
}
export function useMockRedBankScaledDebtAmountQuery<TData = Uint128>({
  client,
  args,
  options,
}: MockRedBankScaledDebtAmountQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    mockRedBankQueryKeys.scaledDebtAmount(client?.contractAddress, args),
    () =>
      client
        ? client.scaledDebtAmount({
            amount: args.amount,
            denom: args.denom,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockRedBankScaledLiquidityAmountQuery<TData>
  extends MockRedBankReactQuery<Uint128, TData> {
  args: {
    amount: Uint128
    denom: string
  }
}
export function useMockRedBankScaledLiquidityAmountQuery<TData = Uint128>({
  client,
  args,
  options,
}: MockRedBankScaledLiquidityAmountQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    mockRedBankQueryKeys.scaledLiquidityAmount(client?.contractAddress, args),
    () =>
      client
        ? client.scaledLiquidityAmount({
            amount: args.amount,
            denom: args.denom,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockRedBankUserPositionQuery<TData>
  extends MockRedBankReactQuery<UserPositionResponse, TData> {
  args: {
    user: string
  }
}
export function useMockRedBankUserPositionQuery<TData = UserPositionResponse>({
  client,
  args,
  options,
}: MockRedBankUserPositionQuery<TData>) {
  return useQuery<UserPositionResponse, Error, TData>(
    mockRedBankQueryKeys.userPosition(client?.contractAddress, args),
    () =>
      client
        ? client.userPosition({
            user: args.user,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockRedBankUserCollateralsQuery<TData>
  extends MockRedBankReactQuery<ArrayOfUserCollateralResponse, TData> {
  args: {
    limit?: number
    startAfter?: string
    user: string
  }
}
export function useMockRedBankUserCollateralsQuery<TData = ArrayOfUserCollateralResponse>({
  client,
  args,
  options,
}: MockRedBankUserCollateralsQuery<TData>) {
  return useQuery<ArrayOfUserCollateralResponse, Error, TData>(
    mockRedBankQueryKeys.userCollaterals(client?.contractAddress, args),
    () =>
      client
        ? client.userCollaterals({
            limit: args.limit,
            startAfter: args.startAfter,
            user: args.user,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockRedBankUserCollateralQuery<TData>
  extends MockRedBankReactQuery<UserCollateralResponse, TData> {
  args: {
    denom: string
    user: string
  }
}
export function useMockRedBankUserCollateralQuery<TData = UserCollateralResponse>({
  client,
  args,
  options,
}: MockRedBankUserCollateralQuery<TData>) {
  return useQuery<UserCollateralResponse, Error, TData>(
    mockRedBankQueryKeys.userCollateral(client?.contractAddress, args),
    () =>
      client
        ? client.userCollateral({
            denom: args.denom,
            user: args.user,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockRedBankUserDebtsQuery<TData>
  extends MockRedBankReactQuery<ArrayOfUserDebtResponse, TData> {
  args: {
    limit?: number
    startAfter?: string
    user: string
  }
}
export function useMockRedBankUserDebtsQuery<TData = ArrayOfUserDebtResponse>({
  client,
  args,
  options,
}: MockRedBankUserDebtsQuery<TData>) {
  return useQuery<ArrayOfUserDebtResponse, Error, TData>(
    mockRedBankQueryKeys.userDebts(client?.contractAddress, args),
    () =>
      client
        ? client.userDebts({
            limit: args.limit,
            startAfter: args.startAfter,
            user: args.user,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockRedBankUserDebtQuery<TData>
  extends MockRedBankReactQuery<UserDebtResponse, TData> {
  args: {
    denom: string
    user: string
  }
}
export function useMockRedBankUserDebtQuery<TData = UserDebtResponse>({
  client,
  args,
  options,
}: MockRedBankUserDebtQuery<TData>) {
  return useQuery<UserDebtResponse, Error, TData>(
    mockRedBankQueryKeys.userDebt(client?.contractAddress, args),
    () =>
      client
        ? client.userDebt({
            denom: args.denom,
            user: args.user,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockRedBankUncollateralizedLoanLimitsQuery<TData>
  extends MockRedBankReactQuery<ArrayOfUncollateralizedLoanLimitResponse, TData> {
  args: {
    limit?: number
    startAfter?: string
    user: string
  }
}
export function useMockRedBankUncollateralizedLoanLimitsQuery<
  TData = ArrayOfUncollateralizedLoanLimitResponse,
>({ client, args, options }: MockRedBankUncollateralizedLoanLimitsQuery<TData>) {
  return useQuery<ArrayOfUncollateralizedLoanLimitResponse, Error, TData>(
    mockRedBankQueryKeys.uncollateralizedLoanLimits(client?.contractAddress, args),
    () =>
      client
        ? client.uncollateralizedLoanLimits({
            limit: args.limit,
            startAfter: args.startAfter,
            user: args.user,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockRedBankUncollateralizedLoanLimitQuery<TData>
  extends MockRedBankReactQuery<UncollateralizedLoanLimitResponse, TData> {
  args: {
    denom: string
    user: string
  }
}
export function useMockRedBankUncollateralizedLoanLimitQuery<
  TData = UncollateralizedLoanLimitResponse,
>({ client, args, options }: MockRedBankUncollateralizedLoanLimitQuery<TData>) {
  return useQuery<UncollateralizedLoanLimitResponse, Error, TData>(
    mockRedBankQueryKeys.uncollateralizedLoanLimit(client?.contractAddress, args),
    () =>
      client
        ? client.uncollateralizedLoanLimit({
            denom: args.denom,
            user: args.user,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockRedBankMarketsQuery<TData>
  extends MockRedBankReactQuery<ArrayOfMarket, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export function useMockRedBankMarketsQuery<TData = ArrayOfMarket>({
  client,
  args,
  options,
}: MockRedBankMarketsQuery<TData>) {
  return useQuery<ArrayOfMarket, Error, TData>(
    mockRedBankQueryKeys.markets(client?.contractAddress, args),
    () =>
      client
        ? client.markets({
            limit: args.limit,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockRedBankMarketQuery<TData> extends MockRedBankReactQuery<Market, TData> {
  args: {
    denom: string
  }
}
export function useMockRedBankMarketQuery<TData = Market>({
  client,
  args,
  options,
}: MockRedBankMarketQuery<TData>) {
  return useQuery<Market, Error, TData>(
    mockRedBankQueryKeys.market(client?.contractAddress, args),
    () =>
      client
        ? client.market({
            denom: args.denom,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockRedBankConfigQuery<TData>
  extends MockRedBankReactQuery<ConfigForString, TData> {}
export function useMockRedBankConfigQuery<TData = ConfigForString>({
  client,
  options,
}: MockRedBankConfigQuery<TData>) {
  return useQuery<ConfigForString, Error, TData>(
    mockRedBankQueryKeys.config(client?.contractAddress),
    () => (client ? client.config() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockRedBankUpdateAssetCollateralStatusMutation {
  client: MockRedBankClient
  msg: {
    denom: string
    enable: boolean
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMockRedBankUpdateAssetCollateralStatusMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MockRedBankUpdateAssetCollateralStatusMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MockRedBankUpdateAssetCollateralStatusMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateAssetCollateralStatus(msg, fee, memo, funds),
    options,
  )
}
export interface MockRedBankLiquidateMutation {
  client: MockRedBankClient
  msg: {
    collateralDenom: string
    recipient?: string
    user: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMockRedBankLiquidateMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MockRedBankLiquidateMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MockRedBankLiquidateMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.liquidate(msg, fee, memo, funds),
    options,
  )
}
export interface MockRedBankRepayMutation {
  client: MockRedBankClient
  msg: {
    onBehalfOf?: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMockRedBankRepayMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, MockRedBankRepayMutation>, 'mutationFn'>,
) {
  return useMutation<ExecuteResult, Error, MockRedBankRepayMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.repay(msg, fee, memo, funds),
    options,
  )
}
export interface MockRedBankBorrowMutation {
  client: MockRedBankClient
  msg: {
    amount: Uint128
    denom: string
    recipient?: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMockRedBankBorrowMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, MockRedBankBorrowMutation>, 'mutationFn'>,
) {
  return useMutation<ExecuteResult, Error, MockRedBankBorrowMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.borrow(msg, fee, memo, funds),
    options,
  )
}
export interface MockRedBankWithdrawMutation {
  client: MockRedBankClient
  msg: {
    amount?: Uint128
    denom: string
    recipient?: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMockRedBankWithdrawMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MockRedBankWithdrawMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MockRedBankWithdrawMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.withdraw(msg, fee, memo, funds),
    options,
  )
}
export interface MockRedBankDepositMutation {
  client: MockRedBankClient
  msg: {
    onBehalfOf?: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMockRedBankDepositMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MockRedBankDepositMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MockRedBankDepositMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.deposit(msg, fee, memo, funds),
    options,
  )
}
export interface MockRedBankUpdateUncollateralizedLoanLimitMutation {
  client: MockRedBankClient
  msg: {
    denom: string
    newLimit: Uint128
    user: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMockRedBankUpdateUncollateralizedLoanLimitMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MockRedBankUpdateUncollateralizedLoanLimitMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MockRedBankUpdateUncollateralizedLoanLimitMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateUncollateralizedLoanLimit(msg, fee, memo, funds),
    options,
  )
}
export interface MockRedBankUpdateAssetMutation {
  client: MockRedBankClient
  msg: {
    denom: string
    params: InitOrUpdateAssetParams
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMockRedBankUpdateAssetMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MockRedBankUpdateAssetMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MockRedBankUpdateAssetMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.updateAsset(msg, fee, memo, funds),
    options,
  )
}
export interface MockRedBankInitAssetMutation {
  client: MockRedBankClient
  msg: {
    denom: string
    params: InitOrUpdateAssetParams
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMockRedBankInitAssetMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MockRedBankInitAssetMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MockRedBankInitAssetMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.initAsset(msg, fee, memo, funds),
    options,
  )
}
export interface MockRedBankUpdateConfigMutation {
  client: MockRedBankClient
  msg: {
    config: CreateOrUpdateConfig
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMockRedBankUpdateConfigMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MockRedBankUpdateConfigMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MockRedBankUpdateConfigMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateConfig(msg, fee, memo, funds),
    options,
  )
}
