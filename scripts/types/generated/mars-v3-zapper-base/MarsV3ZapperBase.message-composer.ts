// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.30.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { MsgExecuteContractEncodeObject } from '@cosmjs/cosmwasm-stargate'
import { MsgExecuteContract } from 'cosmjs-types/cosmwasm/wasm/v1/tx'
import { toUtf8 } from '@cosmjs/encoding'
import {
  InstantiateMsg,
  ExecuteMsg,
  Uint128,
  OwnerUpdate,
  CallbackMsg,
  Addr,
  NewPositionRequest,
  Coin,
  QueryMsg,
  OwnerResponse,
} from './MarsV3ZapperBase.types'
export interface MarsV3ZapperBaseMessage {
  contractAddress: string
  sender: string
  createPosition: (
    {
      lowerTick,
      poolId,
      tokenDesired0,
      tokenDesired1,
      tokenMinAmount0,
      tokenMinAmount1,
      upperTick,
    }: {
      lowerTick: number
      poolId: number
      tokenDesired0?: Coin
      tokenDesired1?: Coin
      tokenMinAmount0: string
      tokenMinAmount1: string
      upperTick: number
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  updateOwner: (ownerUpdate: OwnerUpdate, _funds?: Coin[]) => MsgExecuteContractEncodeObject
  callback: (callbackMsg: CallbackMsg, _funds?: Coin[]) => MsgExecuteContractEncodeObject
}
export class MarsV3ZapperBaseMessageComposer implements MarsV3ZapperBaseMessage {
  sender: string
  contractAddress: string

  constructor(sender: string, contractAddress: string) {
    this.sender = sender
    this.contractAddress = contractAddress
    this.createPosition = this.createPosition.bind(this)
    this.updateOwner = this.updateOwner.bind(this)
    this.callback = this.callback.bind(this)
  }

  createPosition = (
    {
      lowerTick,
      poolId,
      tokenDesired0,
      tokenDesired1,
      tokenMinAmount0,
      tokenMinAmount1,
      upperTick,
    }: {
      lowerTick: number
      poolId: number
      tokenDesired0?: Coin
      tokenDesired1?: Coin
      tokenMinAmount0: string
      tokenMinAmount1: string
      upperTick: number
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            create_position: {
              lower_tick: lowerTick,
              pool_id: poolId,
              token_desired0: tokenDesired0,
              token_desired1: tokenDesired1,
              token_min_amount0: tokenMinAmount0,
              token_min_amount1: tokenMinAmount1,
              upper_tick: upperTick,
            },
          }),
        ),
        funds: _funds,
      }),
    }
  }
  updateOwner = (ownerUpdate: OwnerUpdate, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            update_owner: ownerUpdate,
          }),
        ),
        funds: _funds,
      }),
    }
  }
  callback = (callbackMsg: CallbackMsg, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            callback: callbackMsg,
          }),
        ),
        funds: _funds,
      }),
    }
  }
}
